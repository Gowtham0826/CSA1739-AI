def is_safe(node, color, graph, colors):
    for neighbor in graph[node]:
        if colors[neighbor] == color:
            return False
    return True

def solve_map_coloring(graph, m, colors, node=0):
    if node == len(graph):
        return True

    for color in range(1, m + 1):
        if is_safe(node, color, graph, colors):
            colors[node] = color
            if solve_map_coloring(graph, m, colors, node + 1):
                return True
            colors[node] = 0  # Backtrack

    return False

def map_coloring(graph, m):
    colors = [0] * len(graph)
    if solve_map_coloring(graph, m, colors):
        return colors
    else:
        return None

# Example usage
graph = {
    0: [1, 2],
    1: [0, 2, 3],
    2: [0, 1],
    3: [1]
}
m = 3  # Number of colors
result = map_coloring(graph, m)
print("Coloring result:", result)
