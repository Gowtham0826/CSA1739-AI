import math

# Check for a winner or draw
def evaluate(board):
    win_combinations = [
        [0, 1, 2], [3, 4, 5], [6, 7, 8],  # rows
        [0, 3, 6], [1, 4, 7], [2, 5, 8],  # columns
        [0, 4, 8], [2, 4, 6]              # diagonals
    ]
    for combo in win_combinations:
        if board[combo[0]] == board[combo[1]] == board[combo[2]] != ' ':
            return 1 if board[combo[0]] == 'X' else -1
    return 0

# Check if board is full
def is_full(board):
    return ' ' not in board

# Minimax recursive function
def minimax(board, depth, is_maximizing):
    score = evaluate(board)
    if score != 0 or is_full(board):
        return score

    if is_maximizing:
        best_score = -math.inf
        for i in range(9):
            if board[i] == ' ':
                board[i] = 'X'
                score = minimax(board, depth + 1, False)
                board[i] = ' '
                best_score = max(best_score, score)
        return best_score
    else:
        best_score = math.inf
        for i in range(9):
            if board[i] == ' ':
                board[i] = 'O'
                score = minimax(board, depth + 1, True)
                board[i] = ' '
                best_score = min(best_score, score)
        return best_score

# Find the best move for 'X'
def find_best_move(board):
    best_score = -math.inf
    best_move = -1
    for i in range(9):
        if board[i] == ' ':
            board[i] = 'X'
            score = minimax(board, 0, False)
            board[i] = ' '
            if score > best_score:
                best_score = score
                best_move = i
    return best_move

# Example usage
board = ['X', 'O', 'X',
         ' ', 'O', ' ',
         ' ', ' ', ' ']

best_move = find_best_move(board)
print("Best move for 'X' is at position:", best_move)
